//pipe to build docker image and upload to aws ECR

pipeline {
    agent any
    environment {
        registryCredential = "ecr:us-east-1:awsecr"
        appRegistry = "148566196525.dkr.ecr.us-east-1.amazonaws.com/vprofileappimg"
        vprofileRegistry = "https://148566196525.dkr.ecr.us-east-1.amazonaws.com"
    }

    tools {
        jdk 'OracleJDK8'
        maven 'MAVEN3'
    }

    stages {
        stage('Fetch Code') {
            steps {
                git branch: 'docker', url: 'https://github.com/devopshydclub/vprofile-project.git'
            }
        }

        stage('Bbuild') {
            steps {
                sh 'mvn clean install -DskipTests'
            }
            post {
                success {
                    echo 'Now archiving...'
                    archiveArtifacts artifacts: '**/*.war'
                }
            }
        }

        stage('Test') {
            steps {
                sh 'mvn test'
            }
        }

        stage('Checkstyle Analysis') {
            steps {
                sh 'mvn checkstyle:checkstyle'
            }
        }

        stage('Sonar Analysis') {
            environment {
                scannerHome = tool 'sonar4.7'
            }
            steps {
                withSonarQubeEnv('sonar') {
                    sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
                   -Dsonar.projectName=self-repo \
                   -Dsonar.projectVersion=1.0 \
                   -Dsonar.sources=src/ \
                   -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                   -Dsonar.junit.reportsPath=target/surefire-reports/ \
                   -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                   -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml
                    '''
              }
            }
        }

        stage('Quality Gate') {
            steps {
            timeout(time: 10, unit: 'MINUTES') {
               waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Upload Artifact') {
            steps {
                nexusArtifactUploader artifacts: [[artifactId: 'vpro-app', classifier: '', file: 'target/vprofile-v2.war', type: 'war']], credentialsId: 'nexus', groupId: 'PROD', nexusUrl: '3.235.167.93:8081', nexusVersion: 'nexus3', protocol: 'http', repository: 'vprofile', version: '${BUILD_ID}'
            }
        }

    //     stage('Uploading Artifact') {
    //         steps {
    //             nexusArtifactUploader(
    //             nexusVersion: 'nexus3',
    //             protocol: 'http',
    //             nexusUrl: '3.228.7.113:8081',
    //             groupId: 'QA',
    //             version: "${env.BUILD_ID}",
    //             repository: 'vprofile-repo',
    //             credentialsId: 'nexuslogin',
    //             artifacts: [
    //                 [artifactId: vproapp,
    //                 classifier: '',
    //                 file: 'target/vprofile-v2.war',
    //                 type: 'war']
    //             ]
    //  )
    //         }
    //     }
    stage('Build app image'){
        steps {
            script {
                dockerImage = docker.build( appRegistry + ":$BUILD_NUMBER", "./Docker-files/app/multistage/")
            }
        }
    }

    stage('Upload app image') {
        steps {
            sh '''
            
                aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 148566196525.dkr.ecr.us-east-1.amazonaws.com
                docker push ${appRegistry}:${BUILD_NUMBER}
            '''
                
            }
        }
    }
    // stage('Upload to Nexus') {
    //     steps {
    //         sh '''
    //             NEXUS_USERNAME = admin
    //             NEXUS_PASSWORD = admin

    //             # push the image to nexus

    //             docker tag ${env.appRegistry}:${BUILD_NUMBER} http://3.235.167.93:8081/mydockerrepo/my-image:latest

    //             docker login -u $NEXUS_USERNAME -p $NEXUS_PASSWORD http://3.235.167.93:8081/mydockerrepo

    //             docker push http://3.235.167.93:8081/my-image:latest
    //         '''
    //     }
    // }
}
